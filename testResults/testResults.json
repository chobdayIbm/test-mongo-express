{
  "stats": {
    "suites": 7,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2020-05-20T03:45:42.533Z",
    "end": "2020-05-20T03:45:42.826Z",
    "duration": 293,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.090909090909092,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "743c5ca5-c1d3-4cc8-8731-72c462e68131",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: Runs before all tests suites",
          "fullTitle": "\"before all\" hook: Runs before all tests suites",
          "timedOut": false,
          "duration": 77,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests start at ${new Date()}`);\nawait _common.default.start();",
          "err": {},
          "uuid": "91a5380d-cd44-4f30-90cb-34ccaa589858",
          "parentUUID": "743c5ca5-c1d3-4cc8-8731-72c462e68131",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: Runs after all tests suites",
          "fullTitle": "\"after all\" hook: Runs after all tests suites",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests end at ${new Date()}`);",
          "err": {},
          "uuid": "b8ba117b-9324-4ada-8cb4-937a8ad28532",
          "parentUUID": "743c5ca5-c1d3-4cc8-8731-72c462e68131",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await _common.default.cleanup();",
          "err": {},
          "uuid": "c0be8d41-5185-459e-bdec-ad68d139c6bb",
          "parentUUID": "743c5ca5-c1d3-4cc8-8731-72c462e68131",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
          "title": "Alternate Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/alt.spec.js",
          "file": "/test/alt.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Alternate Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.default.createDoc('policies', _testObjects.policy1);\n_common.default.createDoc('claims', _testObjects.claim1);",
              "err": {},
              "uuid": "46e98673-7efc-4016-b1bc-b7d85eb0a558",
              "parentUUID": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can get all policy",
              "fullTitle": "Alternate Flow can get all policy",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "cb39cec1-04fd-4cd6-bdfa-aabe4bc55b79",
              "parentUUID": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a policy",
              "fullTitle": "Alternate Flow can search a policy",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/policies/search').send({\n  validDate: \"2018-01-01\"\n}).set('Accept', 'application/json');\nconsole.log(`response${response.text}`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body['0'], '_id');\nreturn response;",
              "err": {},
              "uuid": "9a9f98e5-ae83-4975-8b24-0579ec40d6d6",
              "parentUUID": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can get all claims",
              "fullTitle": "Alternate Flow can get all claims",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/claims`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "2eb9b1d0-8d3b-4e81-be05-98a237ca76c2",
              "parentUUID": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a claim",
              "fullTitle": "Alternate Flow can search a claim",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims/search').send({\n  \"description\": \"test2\"\n}).set('Accept', 'application/json');\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "96cf1aa9-5725-4a66-a17b-82e4a57c5457",
              "parentUUID": "e36486f2-1eca-445e-91a9-ab80a594ca2e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb39cec1-04fd-4cd6-bdfa-aabe4bc55b79",
            "9a9f98e5-ae83-4975-8b24-0579ec40d6d6",
            "2eb9b1d0-8d3b-4e81-be05-98a237ca76c2",
            "96cf1aa9-5725-4a66-a17b-82e4a57c5457"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b781bd1f-eb67-4813-8b42-9e60dde1ebcd",
          "title": "Important exception Flows",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
          "file": "/test/exception.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Important exception Flows \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_testdouble.default.reset();",
              "err": {},
              "uuid": "3ae2ee70-a1b2-4f0e-9d11-a10ce4f17de8",
              "parentUUID": "b781bd1f-eb67-4813-8b42-9e60dde1ebcd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1c1bd422-6b05-44a0-9bfc-64e2e3d640cc",
              "title": "Policy Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send an error code when there is an error getting the policy ",
                  "fullTitle": "Important exception Flows Policy Handler should send an error code when there is an error getting the policy ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Policy = _testdouble.default.replace('../src/models/policy', _testdouble.default.object(['findOne']));\nconst PolicyHandler = require('../src/handlers/policyHandler');\nconst errorMessage = 'Random unexpected error';\nconst policy = null;\n_testdouble.default.when(Policy.findOne(_testdouble.default.matchers.anything())).thenCallback(errorMessage, policy);\nPolicyHandler.get(_testDoubles.requestObj, _testDoubles.responseObj);\n_testDoubles.responseObj._status.should.equal(400);\n_testDoubles.responseObj._sendObj.should.equal(errorMessage);",
                  "err": {},
                  "uuid": "08676a48-a57a-4c5b-bc22-7c901201cbe0",
                  "parentUUID": "1c1bd422-6b05-44a0-9bfc-64e2e3d640cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08676a48-a57a-4c5b-bc22-7c901201cbe0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b12c5752-52a2-4196-b629-7b3a38baea17",
              "title": "Main Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify handlers are set up ",
                  "fullTitle": "Important exception Flows Main Handler a flow just to verify handlers are set up ",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "26b975bd-2e84-4810-8b36-1900f36d2401",
                  "parentUUID": "b12c5752-52a2-4196-b629-7b3a38baea17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "26b975bd-2e84-4810-8b36-1900f36d2401"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b73c4dde-b396-4109-8f8a-3d6d109d4832",
              "title": "Model",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify model is set up ",
                  "fullTitle": "Important exception Flows Model a flow just to verify model is set up ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mongoose = _testdouble.default.replace('mongoose', _testDoubles.MongooseTestDouble); //used internally on initialization\n\nconst Policy = require('../src/models/policy.js');\nPolicy.should.have.property('policyNumber');\nPolicy.findOne.should.be.an.instanceof(Function);\nPolicy.valid.should.be.an.instanceof(Function);",
                  "err": {},
                  "uuid": "562f29d4-67db-484f-92d0-95adb746a1a0",
                  "parentUUID": "b73c4dde-b396-4109-8f8a-3d6d109d4832",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "562f29d4-67db-484f-92d0-95adb746a1a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3718f80-1eee-40b5-903a-fd95ea8750ea",
          "title": "Main Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/main.spec.js",
          "file": "/test/main.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Main Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.default.createDoc('policies', _testObjects.policy1);",
              "err": {},
              "uuid": "441e9476-52a8-4c50-afef-6d00c3a8cc5e",
              "parentUUID": "e3718f80-1eee-40b5-903a-fd95ea8750ea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can view a policy",
              "fullTitle": "Main Flow can view a policy",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies/${_testObjects.policy1.policyNumber}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.policy1, response.body, '_id');\nreturn response;",
              "err": {},
              "uuid": "90abe648-fc1e-4243-9707-c0f58e1825ed",
              "parentUUID": "e3718f80-1eee-40b5-903a-fd95ea8750ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can create a claim",
              "fullTitle": "Main Flow can create a claim",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims').send(_testObjects.claim1).set('Accept', 'application/json');\nconst claimNumber = response.body.claimNumber;\nresponse.status.should.equal(201);\nconst dbRecord = await _common.default.findOne('claims', {\n  claimNumber: claimNumber\n});\n_testObjects.claim1.description.should.eql(dbRecord.description);\n_testObjects.claim1.policyNumber.should.eql(dbRecord.policyNumber);\ndbRecord.issues.length.should.equals(1);\n(0, _match.default)(_testObjects.claim1.issues[0], dbRecord.issues[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "cf900848-d5a0-4a0a-994e-564691bdb1f8",
              "parentUUID": "e3718f80-1eee-40b5-903a-fd95ea8750ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can view a claim",
              "fullTitle": "Main Flow can view a claim",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  _id\n} = await _common.default.createDoc('claims', _testObjects.claim1);\nconst response = await (0, _supertest.default)(server).get(`/claims?claimNumber=${_id}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "abc702bb-f572-4122-9016-dfbd9af43a57",
              "parentUUID": "e3718f80-1eee-40b5-903a-fd95ea8750ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90abe648-fc1e-4243-9707-c0f58e1825ed",
            "cf900848-d5a0-4a0a-994e-564691bdb1f8",
            "abc702bb-f572-4122-9016-dfbd9af43a57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ebbaeee4-10e4-41d3-bd68-59dae40b0657",
          "title": "Test infrastructure",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/root.spec.js",
          "file": "/test/root.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "is running",
              "fullTitle": "Test infrastructure is running",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await new Promise((resolve, reject) => resolve());\nreturn result;",
              "err": {},
              "uuid": "305491c8-256f-4e65-84f5-72f3c94cc3c7",
              "parentUUID": "ebbaeee4-10e4-41d3-bd68-59dae40b0657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "305491c8-256f-4e65-84f5-72f3c94cc3c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportTitle": "Test Results",
        "reportPageTitle": "Test Results",
        "reportDir": "testResults",
        "reportFilename": "testResults",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "5.1.0"
    }
  }
}