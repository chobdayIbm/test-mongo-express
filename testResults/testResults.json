{
  "stats": {
    "suites": 7,
    "tests": 12,
    "passes": 11,
    "pending": 1,
    "failures": 0,
    "start": "2020-05-21T07:06:03.177Z",
    "end": "2020-05-21T07:06:04.911Z",
    "duration": 1734,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 8.333333333333332,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19d5675f-7992-4aca-a98d-0fbcf594c9ed",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: Runs before all tests suites",
          "fullTitle": "\"before all\" hook: Runs before all tests suites",
          "timedOut": false,
          "duration": 79,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests start at ${new Date()}`);\nawait _common.mongoHelper.start();",
          "err": {},
          "uuid": "289e3380-30c4-4e52-bd6c-b1c40f0748c3",
          "parentUUID": "19d5675f-7992-4aca-a98d-0fbcf594c9ed",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: Runs after all tests suites",
          "fullTitle": "\"after all\" hook: Runs after all tests suites",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests end at ${new Date()}`);",
          "err": {},
          "uuid": "a32e6c3c-2db9-4d74-b164-b77052683ad2",
          "parentUUID": "19d5675f-7992-4aca-a98d-0fbcf594c9ed",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await _common.mongoHelper.cleanup();",
          "err": {},
          "uuid": "63c9433e-326a-42fc-aa1f-9c0b67b152a1",
          "parentUUID": "19d5675f-7992-4aca-a98d-0fbcf594c9ed",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "dbdd2f2f-933a-4559-971b-b5b3e3a23de5",
          "title": "Test infrastructure",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/root.spec.js",
          "file": "/test/root.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "is running",
              "fullTitle": "Test infrastructure is running",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await new Promise((resolve, reject) => resolve());\nreturn result;",
              "err": {},
              "uuid": "c9caa017-b381-4448-a225-e4751a3f1e6f",
              "parentUUID": "dbdd2f2f-933a-4559-971b-b5b3e3a23de5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9caa017-b381-4448-a225-e4751a3f1e6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
          "title": "Main Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/main.spec.js",
          "file": "/test/main.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Main Flow \"before all\" hook",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _common.rabbitMqHelper.start();",
              "err": {},
              "uuid": "95aac8ee-9d9e-48ba-aa39-a83d3d268073",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Main Flow \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.mongoHelper.createDoc('policies', _testObjects.policy1);",
              "err": {},
              "uuid": "604173c8-2312-410f-8d65-1af2446112f8",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Main Flow \"after all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _common.rabbitMqHelper.close();",
              "err": {},
              "uuid": "274d0d1e-4479-40e2-9d2b-58779f19709d",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "can view a policy",
              "fullTitle": "Main Flow can view a policy",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies/${_testObjects.policy1.policyNumber}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.policy1, response.body, '_id');\nreturn response;",
              "err": {},
              "uuid": "1a4aecca-69f2-4c2a-8e86-983230a6ecfd",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can create a claim",
              "fullTitle": "Main Flow can create a claim",
              "timedOut": false,
              "duration": 557,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const messages = [];\nawait _common.rabbitMqHelper.setupListener('claim_audit', 'direct', 'claim', messages);\nconst response = await (0, _supertest.default)(server).post('/claims').send(_testObjects.claim1).set('Accept', 'application/json');\nconst claimNumber = response.body.claimNumber;\nresponse.status.should.equal(201); // Verify that the claim is saved in database\nconst dbRecord = await _common.mongoHelper.findOne('claims', {\n  claimNumber: claimNumber\n});\n_testObjects.claim1.description.should.eql(dbRecord.description);\n_testObjects.claim1.policyNumber.should.eql(dbRecord.policyNumber);\ndbRecord.issues.length.should.equals(1);\n(0, _match.default)(_testObjects.claim1.issues[0], dbRecord.issues[0], '_id'); // Verify that the claim is sent to the audit queue\nmessages.length.should.equals(1);\nmessages[0]._id.should.eql(dbRecord._id.toString());\nmessages[0].description.should.eql(dbRecord.description);\nmessages[0].policyNumber.should.eql(dbRecord.policyNumber);\nmessages[0].issues.length.should.equals(1);\n(0, _match.default)(messages[0].issues[0], dbRecord.issues[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "3d5ac7af-4976-4daa-88df-dcba6f96c69d",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can view a claim",
              "fullTitle": "Main Flow can view a claim",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  _id\n} = await _common.mongoHelper.createDoc('claims', _testObjects.claim1);\nconst response = await (0, _supertest.default)(server).get(`/claims?claimNumber=${_id}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "b90274ec-34d7-4c6e-b683-ae44002aec07",
              "parentUUID": "177f7f59-681a-4b4c-b21a-8b1b5f9d9dd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a4aecca-69f2-4c2a-8e86-983230a6ecfd",
            "3d5ac7af-4976-4daa-88df-dcba6f96c69d",
            "b90274ec-34d7-4c6e-b683-ae44002aec07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 595,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
          "title": "Alternate Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/alt.spec.js",
          "file": "/test/alt.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Alternate Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.mongoHelper.createDoc('policies', _testObjects.policy1);\n_common.mongoHelper.createDoc('claims', _testObjects.claim1);",
              "err": {},
              "uuid": "386db907-fa1c-47e7-b862-2c8703f89343",
              "parentUUID": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can get all policy",
              "fullTitle": "Alternate Flow can get all policy",
              "timedOut": false,
              "duration": 882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "66851145-5c3f-4195-bd34-9a8927107f20",
              "parentUUID": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a policy",
              "fullTitle": "Alternate Flow can search a policy",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/policies/search').send({\n  validDate: \"2018-01-01\"\n}).set('Accept', 'application/json');\nconsole.log(`response${response.text}`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body['0'], '_id');\nreturn response;",
              "err": {},
              "uuid": "4dbc7607-1478-457b-9461-2edf29ab2bb1",
              "parentUUID": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can get all claims",
              "fullTitle": "Alternate Flow can get all claims",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/claims`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "88ca2e33-3fb5-4015-974b-6c600c21c6d6",
              "parentUUID": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a claim",
              "fullTitle": "Alternate Flow can search a claim",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims/search').send({\n  \"description\": \"test2\"\n}).set('Accept', 'application/json');\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "763fa952-68f6-46c7-bda1-9ddec400cdb8",
              "parentUUID": "5ffbbf8a-4210-441e-bed6-93e6e5778af9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66851145-5c3f-4195-bd34-9a8927107f20",
            "4dbc7607-1478-457b-9461-2edf29ab2bb1",
            "88ca2e33-3fb5-4015-974b-6c600c21c6d6",
            "763fa952-68f6-46c7-bda1-9ddec400cdb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 893,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf771275-debe-4ecb-b468-89b067dfa19f",
          "title": "Important exception Flows",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
          "file": "/test/exception.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Important exception Flows \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_testdouble.default.reset();",
              "err": {},
              "uuid": "d6ff0036-5811-447f-99cb-dcf153e9eab8",
              "parentUUID": "cf771275-debe-4ecb-b468-89b067dfa19f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cd114cef-251d-4a70-88d5-dbeda26efa6a",
              "title": "Policy Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle error from world time api gracefully",
                  "fullTitle": "Important exception Flows Policy Handler should handle error from world time api gracefully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _nock.default)('http://worldtimeapi.org/api') //mock internal API call using Nock.js\n.get('/timezone/Asia/Singapore').reply(404);\n_common.mongoHelper.createDoc('policies', _testObjects.policy1);\n_common.mongoHelper.createDoc('claims', _testObjects.claim1);\nconst server = require('../src/index');\nconst response = await (0, _supertest.default)(server).get(`/policies`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body[\"0\"], '_id');\nreturn response;",
                  "err": {},
                  "uuid": "55133995-f2a2-45b0-8803-c83881a479ab",
                  "parentUUID": "cd114cef-251d-4a70-88d5-dbeda26efa6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send an error code when there is an error getting the policy ",
                  "fullTitle": "Important exception Flows Policy Handler should send an error code when there is an error getting the policy ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Policy = _testdouble.default.replace('../src/models/policy', _testdouble.default.object(['findOne']));\nconst PolicyHandler = require('../src/handlers/policyHandler');\nconst errorMessage = 'Random unexpected error';\nconst policy = null;\n_testdouble.default.when(Policy.findOne(_testdouble.default.matchers.anything())).thenCallback(errorMessage, policy);\nPolicyHandler.get(_testDoubles.requestObj, _testDoubles.responseObj);\n_testDoubles.responseObj._status.should.equal(400);\n_testDoubles.responseObj._sendObj.should.equal(errorMessage);",
                  "err": {},
                  "uuid": "c7dc5e62-b5aa-404c-b760-7b0c999b1a8d",
                  "parentUUID": "cd114cef-251d-4a70-88d5-dbeda26efa6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55133995-f2a2-45b0-8803-c83881a479ab",
                "c7dc5e62-b5aa-404c-b760-7b0c999b1a8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ef90bb2-712b-47bf-826c-9c9d63f82027",
              "title": "Main Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify handlers are set up ",
                  "fullTitle": "Important exception Flows Main Handler a flow just to verify handlers are set up ",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8591edaa-b4d2-495a-9826-bd5233e5aa8a",
                  "parentUUID": "5ef90bb2-712b-47bf-826c-9c9d63f82027",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "8591edaa-b4d2-495a-9826-bd5233e5aa8a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fea53af-9042-480a-810d-8512a0893e8a",
              "title": "Model",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify model is set up ",
                  "fullTitle": "Important exception Flows Model a flow just to verify model is set up ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Do not use this if there is no exception handling in the model file\nconst mongoose = _testdouble.default.replace('mongoose', _testDoubles.MongooseTestDouble); //used internally on initialization\n\nconst Policy = require('../src/models/policy.js');\nPolicy.should.have.property('policyNumber');\nPolicy.findOne.should.be.an.instanceof(Function);\nPolicy.valid.should.be.an.instanceof(Function);",
                  "err": {},
                  "uuid": "441a5b74-3c51-4caf-9a84-b27b98e4ac74",
                  "parentUUID": "3fea53af-9042-480a-810d-8512a0893e8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "441a5b74-3c51-4caf-9a84-b27b98e4ac74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportTitle": "Test Results",
        "reportPageTitle": "Test Results",
        "reportDir": "testResults",
        "reportFilename": "testResults",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "5.1.0"
    }
  }
}