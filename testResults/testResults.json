{
  "stats": {
    "suites": 7,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2020-05-21T04:39:07.687Z",
    "end": "2020-05-21T04:39:08.673Z",
    "duration": 986,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.090909090909092,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "623d75dc-e145-4945-b897-4ea0710d0c0b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: Runs before all tests suites",
          "fullTitle": "\"before all\" hook: Runs before all tests suites",
          "timedOut": false,
          "duration": 78,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests start at ${new Date()}`);\nawait _common.mongoHelper.start();",
          "err": {},
          "uuid": "f78764f3-5553-4567-b245-e6f4429ba5da",
          "parentUUID": "623d75dc-e145-4945-b897-4ea0710d0c0b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: Runs after all tests suites",
          "fullTitle": "\"after all\" hook: Runs after all tests suites",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests end at ${new Date()}`);",
          "err": {},
          "uuid": "5dfb4f4b-e5f7-40ef-a22f-e41987daa0e2",
          "parentUUID": "623d75dc-e145-4945-b897-4ea0710d0c0b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await _common.mongoHelper.cleanup();",
          "err": {},
          "uuid": "86b004c3-a6e0-41f8-9d0d-4b47a06cc346",
          "parentUUID": "623d75dc-e145-4945-b897-4ea0710d0c0b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "02e85c69-3da3-4aea-9d18-0955356deb59",
          "title": "Test infrastructure",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/root.spec.js",
          "file": "/test/root.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "is running",
              "fullTitle": "Test infrastructure is running",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await new Promise((resolve, reject) => resolve());\nreturn result;",
              "err": {},
              "uuid": "170e597e-6470-4e42-9853-bd4439b9ea87",
              "parentUUID": "02e85c69-3da3-4aea-9d18-0955356deb59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "170e597e-6470-4e42-9853-bd4439b9ea87"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
          "title": "Main Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/main.spec.js",
          "file": "/test/main.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Main Flow \"before all\" hook",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _common.rabbitMqHelper.start();",
              "err": {},
              "uuid": "86e1f4b7-8aca-4b3a-9557-de0e27530482",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Main Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.mongoHelper.createDoc('policies', _testObjects.policy1);",
              "err": {},
              "uuid": "810fc563-feb0-42e2-82ca-d50e5aa59855",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Main Flow \"after all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _common.rabbitMqHelper.close();",
              "err": {},
              "uuid": "1e3730e5-09ed-43c4-9573-76a4c515833e",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "can view a policy",
              "fullTitle": "Main Flow can view a policy",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies/${_testObjects.policy1.policyNumber}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.policy1, response.body, '_id');\nreturn response;",
              "err": {},
              "uuid": "dc2d1cc1-f854-4590-80ac-069a31c721e1",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can create a claim",
              "fullTitle": "Main Flow can create a claim",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const messages = [];\nawait _common.rabbitMqHelper.setupListener('claim_audit', 'direct', 'claim', messages);\nconst response = await (0, _supertest.default)(server).post('/claims').send(_testObjects.claim1).set('Accept', 'application/json');\nconst claimNumber = response.body.claimNumber;\nresponse.status.should.equal(201); // Verify that the claim is saved in database\nconst dbRecord = await _common.mongoHelper.findOne('claims', {\n  claimNumber: claimNumber\n});\n_testObjects.claim1.description.should.eql(dbRecord.description);\n_testObjects.claim1.policyNumber.should.eql(dbRecord.policyNumber);\ndbRecord.issues.length.should.equals(1);\n(0, _match.default)(_testObjects.claim1.issues[0], dbRecord.issues[0], '_id'); // Verify that the claim is sent to the audit queue\nmessages.length.should.equals(1);\nmessages[0]._id.should.eql(dbRecord._id.toString());\nmessages[0].description.should.eql(dbRecord.description);\nmessages[0].policyNumber.should.eql(dbRecord.policyNumber);\nmessages[0].issues.length.should.equals(1);\n(0, _match.default)(messages[0].issues[0], dbRecord.issues[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "0c3bce9f-6e1e-4c5b-8890-9a2fe8292521",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can view a claim",
              "fullTitle": "Main Flow can view a claim",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  _id\n} = await _common.mongoHelper.createDoc('claims', _testObjects.claim1);\nconst response = await (0, _supertest.default)(server).get(`/claims?claimNumber=${_id}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "8b93368c-1c83-451d-b174-81cc3ac6c466",
              "parentUUID": "6a60c525-bb1d-49dd-84e6-1c23379c90d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc2d1cc1-f854-4590-80ac-069a31c721e1",
            "0c3bce9f-6e1e-4c5b-8890-9a2fe8292521",
            "8b93368c-1c83-451d-b174-81cc3ac6c466"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 608,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0bec01a5-e157-492d-8db0-9c362c75e730",
          "title": "Alternate Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/alt.spec.js",
          "file": "/test/alt.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Alternate Flow \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.mongoHelper.createDoc('policies', _testObjects.policy1);\n_common.mongoHelper.createDoc('claims', _testObjects.claim1);",
              "err": {},
              "uuid": "498c9323-c460-4298-a82f-a778d665eae8",
              "parentUUID": "0bec01a5-e157-492d-8db0-9c362c75e730",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can get all policy",
              "fullTitle": "Alternate Flow can get all policy",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "4b9c05c2-2f28-4f8b-b97b-a491f0de64d5",
              "parentUUID": "0bec01a5-e157-492d-8db0-9c362c75e730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a policy",
              "fullTitle": "Alternate Flow can search a policy",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/policies/search').send({\n  validDate: \"2018-01-01\"\n}).set('Accept', 'application/json');\nconsole.log(`response${response.text}`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body['0'], '_id');\nreturn response;",
              "err": {},
              "uuid": "d9b97f4e-81f8-496f-bfea-d8bc6e2167a4",
              "parentUUID": "0bec01a5-e157-492d-8db0-9c362c75e730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can get all claims",
              "fullTitle": "Alternate Flow can get all claims",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/claims`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "853074da-cbb3-432f-9c4f-b1cd3befdd1f",
              "parentUUID": "0bec01a5-e157-492d-8db0-9c362c75e730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a claim",
              "fullTitle": "Alternate Flow can search a claim",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims/search').send({\n  \"description\": \"test2\"\n}).set('Accept', 'application/json');\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "f4f01be2-7c0c-4bf4-bd15-aaa09d315322",
              "parentUUID": "0bec01a5-e157-492d-8db0-9c362c75e730",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b9c05c2-2f28-4f8b-b97b-a491f0de64d5",
            "d9b97f4e-81f8-496f-bfea-d8bc6e2167a4",
            "853074da-cbb3-432f-9c4f-b1cd3befdd1f",
            "f4f01be2-7c0c-4bf4-bd15-aaa09d315322"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "89456dd5-9ae6-4b1c-b3a6-a1cec5541281",
          "title": "Important exception Flows",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
          "file": "/test/exception.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Important exception Flows \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_testdouble.default.reset();",
              "err": {},
              "uuid": "3d2567fe-05fb-4748-83cc-3aa3aa010789",
              "parentUUID": "89456dd5-9ae6-4b1c-b3a6-a1cec5541281",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b2c8f6d2-5b4c-4562-9434-b4e96ade0ec6",
              "title": "Policy Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send an error code when there is an error getting the policy ",
                  "fullTitle": "Important exception Flows Policy Handler should send an error code when there is an error getting the policy ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Policy = _testdouble.default.replace('../src/models/policy', _testdouble.default.object(['findOne']));\nconst PolicyHandler = require('../src/handlers/policyHandler');\nconst errorMessage = 'Random unexpected error';\nconst policy = null;\n_testdouble.default.when(Policy.findOne(_testdouble.default.matchers.anything())).thenCallback(errorMessage, policy);\nPolicyHandler.get(_testDoubles.requestObj, _testDoubles.responseObj);\n_testDoubles.responseObj._status.should.equal(400);\n_testDoubles.responseObj._sendObj.should.equal(errorMessage);",
                  "err": {},
                  "uuid": "5b880fbf-9de6-42aa-9373-918e6684d1b9",
                  "parentUUID": "b2c8f6d2-5b4c-4562-9434-b4e96ade0ec6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b880fbf-9de6-42aa-9373-918e6684d1b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b25e96b8-4a1a-40e7-8212-f16996ec6524",
              "title": "Main Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify handlers are set up ",
                  "fullTitle": "Important exception Flows Main Handler a flow just to verify handlers are set up ",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9b4e9703-e16f-4141-8451-33bd8b354943",
                  "parentUUID": "b25e96b8-4a1a-40e7-8212-f16996ec6524",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9b4e9703-e16f-4141-8451-33bd8b354943"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3562d093-b32d-4345-aa4b-5000001548bb",
              "title": "Model",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify model is set up ",
                  "fullTitle": "Important exception Flows Model a flow just to verify model is set up ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Do not use this if there is no exception handling in the model file\nconst mongoose = _testdouble.default.replace('mongoose', _testDoubles.MongooseTestDouble); //used internally on initialization\n\nconst Policy = require('../src/models/policy.js');\nPolicy.should.have.property('policyNumber');\nPolicy.findOne.should.be.an.instanceof(Function);\nPolicy.valid.should.be.an.instanceof(Function);",
                  "err": {},
                  "uuid": "a92c50ca-96e6-488d-a137-161e819e3b6e",
                  "parentUUID": "3562d093-b32d-4345-aa4b-5000001548bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a92c50ca-96e6-488d-a137-161e819e3b6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportTitle": "Test Results",
        "reportPageTitle": "Test Results",
        "reportDir": "testResults",
        "reportFilename": "testResults",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "5.1.0"
    }
  }
}