{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2020-05-20T02:11:08.895Z",
    "end": "2020-05-20T02:11:09.185Z",
    "duration": 290,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "704b1c83-7bbc-49ee-8e4e-571b66e962be",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: Runs before all tests suites",
          "fullTitle": "\"before all\" hook: Runs before all tests suites",
          "timedOut": false,
          "duration": 73,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests start at ${new Date()}`);\nawait _common.default.start();",
          "err": {},
          "uuid": "8c4f8a86-2580-405d-ba13-f00a3221e410",
          "parentUUID": "704b1c83-7bbc-49ee-8e4e-571b66e962be",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: Runs after all tests suites",
          "fullTitle": "\"after all\" hook: Runs after all tests suites",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(`Tests end at ${new Date()}`);",
          "err": {},
          "uuid": "66d31aa8-0bf0-473b-8f40-fa49d91f6839",
          "parentUUID": "704b1c83-7bbc-49ee-8e4e-571b66e962be",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await _common.default.cleanup();",
          "err": {},
          "uuid": "26e1507b-2642-401e-960f-9ce75ab3e67d",
          "parentUUID": "704b1c83-7bbc-49ee-8e4e-571b66e962be",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
          "title": "Alternate Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/alt.spec.js",
          "file": "/test/alt.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Alternate Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.default.createDoc('policies', _testObjects.policy1);\n_common.default.createDoc('claims', _testObjects.claim1);",
              "err": {},
              "uuid": "78f6b769-19d3-47e1-a05e-5d146aeaabb2",
              "parentUUID": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can get all policy",
              "fullTitle": "Alternate Flow can get all policy",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "5b409b60-55d4-4db8-a006-3039158f5fcc",
              "parentUUID": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a policy",
              "fullTitle": "Alternate Flow can search a policy",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/policies/search').send({\n  validDate: \"2018-01-01\"\n}).set('Accept', 'application/json');\nconsole.log(`response${response.text}`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.policy1, response.body['0'], '_id');\nreturn response;",
              "err": {},
              "uuid": "946b81fc-6fbe-4185-84d3-842d88b374ba",
              "parentUUID": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can get all claims",
              "fullTitle": "Alternate Flow can get all claims",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/claims`);\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[\"0\"], '_id');\nreturn response;",
              "err": {},
              "uuid": "ce64f1a2-1b62-4dec-92ba-2219901042e9",
              "parentUUID": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can search a claim",
              "fullTitle": "Alternate Flow can search a claim",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims/search').send({\n  \"description\": \"test2\"\n}).set('Accept', 'application/json');\nresponse.status.should.equal(200);\nObject.keys(response.body).should.be.eqls(['0']);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "220567b0-acd6-4b21-a753-c4c0584d069b",
              "parentUUID": "13298f6a-cd3a-4a3d-83cf-50a59759d954",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b409b60-55d4-4db8-a006-3039158f5fcc",
            "946b81fc-6fbe-4185-84d3-842d88b374ba",
            "ce64f1a2-1b62-4dec-92ba-2219901042e9",
            "220567b0-acd6-4b21-a753-c4c0584d069b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94fac863-626a-4d5f-8a7a-233e6dd148cf",
          "title": "Important exception Flows",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
          "file": "/test/exception.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Important exception Flows \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_testdouble.default.reset();",
              "err": {},
              "uuid": "0efcd964-65f8-42bb-8d2b-91a7d76c32b5",
              "parentUUID": "94fac863-626a-4d5f-8a7a-233e6dd148cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "77118f94-03d1-49fd-a78f-5dee9802b631",
              "title": "Policy Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Important exception Flows Policy Handler \"before each\" hook",
                  "timedOut": false,
                  "duration": 8,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Policy = _testdouble.default.replace('../src/models/policy', _testdouble.default.object(['findOne']));\nPolicyHandler = require('../src/handlers/policyHandler');",
                  "err": {},
                  "uuid": "a33c585a-2478-4a6f-9660-28bd6a9611ec",
                  "parentUUID": "77118f94-03d1-49fd-a78f-5dee9802b631",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send an error code when there is an error getting the policy ",
                  "fullTitle": "Important exception Flows Policy Handler should send an error code when there is an error getting the policy ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = 'Random unexpected error';\nconst policy = null;\n_testdouble.default.when(Policy.findOne(_testdouble.default.matchers.anything())).thenCallback(errorMessage, policy);\nPolicyHandler.get(_testDoubles.requestObj, _testDoubles.responseObj);\n_testDoubles.responseObj._status.should.equal(400);\n_testDoubles.responseObj._sendObj.should.equal(errorMessage);",
                  "err": {},
                  "uuid": "c6120bca-12ed-403a-93ed-0dfb826c3ebf",
                  "parentUUID": "77118f94-03d1-49fd-a78f-5dee9802b631",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6120bca-12ed-403a-93ed-0dfb826c3ebf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "473f7960-bfb0-44c6-8c97-5dc3a09dc5e3",
              "title": "Main Handler",
              "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/exception.spec.js",
              "file": "/test/exception.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Important exception Flows Main Handler \"before each\" hook",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mongoose = _testdouble.default.replace('mongoose', _testDoubles.MongooseTestDouble); //used internally on initialization\n\nPolicyHandler = _testdouble.default.replace('../src/handlers/policyHandler');\nClaimHandler = _testdouble.default.replace('../src/handlers/claimHandler');\nHandlers = require('../src/handlers');",
                  "err": {},
                  "uuid": "dab5ca88-efe2-47bb-a004-11f270cf9150",
                  "parentUUID": "473f7960-bfb0-44c6-8c97-5dc3a09dc5e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a flow just to verify handlers are set up ",
                  "fullTitle": "Important exception Flows Main Handler a flow just to verify handlers are set up ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const router = {\n  paths: [],\n  get: function (str, cb) {\n    try {\n      this.paths.push(str);\n      cb(_testDoubles.requestObj, _testDoubles.responseObj);\n    } catch (e) {\n      console.error(e);\n    }\n  },\n  post: function () {}\n};\nHandlers.setupHandlers(router);\nrouter.paths.includes(\"/policies\").should.be.true;\n_testdouble.default.verify(PolicyHandler.get(), {\n  ignoreExtraArgs: true\n}); //verifies that the router is connected",
                  "err": {},
                  "uuid": "74534d27-9e72-4b17-844a-6c022a32a5c4",
                  "parentUUID": "473f7960-bfb0-44c6-8c97-5dc3a09dc5e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74534d27-9e72-4b17-844a-6c022a32a5c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7719cc5b-e448-4971-8138-32ca5d0969a7",
          "title": "Main Flow",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/main.spec.js",
          "file": "/test/main.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Main Flow \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = require('../src/index');\n_common.default.createDoc('policies', _testObjects.policy1);",
              "err": {},
              "uuid": "2ecc1a85-6fc1-4ee8-89d8-bb9f39f20395",
              "parentUUID": "7719cc5b-e448-4971-8138-32ca5d0969a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "can view a policy",
              "fullTitle": "Main Flow can view a policy",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).get(`/policies/${_testObjects.policy1.policyNumber}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.policy1, response.body, '_id');\nreturn response;",
              "err": {},
              "uuid": "219189b5-3306-4a01-abd4-587cf8f96112",
              "parentUUID": "7719cc5b-e448-4971-8138-32ca5d0969a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can create a claim",
              "fullTitle": "Main Flow can create a claim",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, _supertest.default)(server).post('/claims').send(_testObjects.claim1).set('Accept', 'application/json');\nconst claimNumber = response.body.claimNumber;\nresponse.status.should.equal(201);\nconst dbRecord = await _common.default.findOne('claims', {\n  claimNumber: claimNumber\n});\n_testObjects.claim1.description.should.eql(dbRecord.description);\n_testObjects.claim1.policyNumber.should.eql(dbRecord.policyNumber);\ndbRecord.issues.length.should.equals(1);\n(0, _match.default)(_testObjects.claim1.issues[0], dbRecord.issues[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "8e6dfa64-0f10-4147-9fff-02437c18b8ef",
              "parentUUID": "7719cc5b-e448-4971-8138-32ca5d0969a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can view a claim",
              "fullTitle": "Main Flow can view a claim",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  _id\n} = await _common.default.createDoc('claims', _testObjects.claim1);\nconst response = await (0, _supertest.default)(server).get(`/claims?claimNumber=${_id}`);\nresponse.status.should.equal(200);\n(0, _match.default)(_testObjects.claim1, response.body[0], '_id');\nreturn response;",
              "err": {},
              "uuid": "79544e02-afea-4a43-b26f-13d25b64ac44",
              "parentUUID": "7719cc5b-e448-4971-8138-32ca5d0969a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "219189b5-3306-4a01-abd4-587cf8f96112",
            "8e6dfa64-0f10-4147-9fff-02437c18b8ef",
            "79544e02-afea-4a43-b26f-13d25b64ac44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f69babe0-6ad6-40aa-ba23-9af87097f803",
          "title": "Test infrastructure",
          "fullFile": "/Users/colinhobday/project/bendigo/legacy-mongoose/test/root.spec.js",
          "file": "/test/root.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "is running",
              "fullTitle": "Test infrastructure is running",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await new Promise((resolve, reject) => resolve());\nreturn result;",
              "err": {},
              "uuid": "1626616b-54f5-432c-9ff0-4a5b4d34b9b0",
              "parentUUID": "f69babe0-6ad6-40aa-ba23-9af87097f803",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1626616b-54f5-432c-9ff0-4a5b4d34b9b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportTitle": "Test Results",
        "reportPageTitle": "Test Results",
        "reportDir": "testResults",
        "reportFilename": "testResults",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "5.1.0"
    }
  }
}